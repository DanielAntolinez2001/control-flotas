// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  lastname  String
  email     String   @unique
  password  String
  role      typeRole @default(driver)
  avatar    String?
  active    Boolean  @default(true)
  route     Route[]
  tasks     Task[]
  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?  @unique @db.ObjectId
  createdAt DateTime @default(now())
}

model Task {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  description String
  check       Boolean @default(false)
  user        User?   @relation(fields: [userId], references: [id])
  userId      String? @db.ObjectId
}

model Address {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  street    String
  city      String
  state     String
  zip_code  String
  details   String
  neighborhood String
  User      User?
  RouteFrom Route[] @relation("FromAddress")
  RouteTo   Route[] @relation("ToAddress")
}

model Truck {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  brand             String
  model             Int
  status            String
  avatar            String?
  license_plate     String            @unique
  fluids_system     FluidsSystem? //Sistema de fluidos
  body_chassis      BodyChassis? //Carrocería y chasis del camión
  electrical_system ElectricalSystem? //Sistema eléctrico
  brakes            Brakes? //Sistemma de frenos 
  fuel              Fuel[] //Historial de combustible
  exhaust_system    ExhaustSystem? //Sistema de escape
  tire              Tire? //Neumáticos
  Maintenance       Maintenance[]
  route             Route[]
  change_neumatics  DateTime          @default(now())
  createdAt         DateTime          @default(now())
}

//--------------------------------- Interior de los camiones ----------------------------------

model Fuel {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  truck       Truck      @relation(fields: [truckId], references: [id])
  truckId     String     @unique @db.ObjectId
  amount      FuelAmount @default(Empty)
  cost        Float?
  efficienncy Float?     @default(0)
}

model Brakes {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  truck           Truck?          @relation(fields: [truckId], references: [id])
  truckId         String?         @unique @db.ObjectId
  pads_condition  BrakesCondition @default(Good)
  discs_condition BrakesCondition @default(Good)
  fluid_level     Level           @default(Full)
}

model FluidsSystem {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  truck                 Truck?     @relation(fields: [truckId], references: [id])
  truckId               String?    @unique @db.ObjectId
  direction_fluid_level FluidLevel @default(Full)
  brake_fluid_level     FluidLevel @default(Full)
  coolant_fluid_level   FluidLevel @default(Full)
  wiper_fluid_level     FluidLevel @default(Full)
}

model BodyChassis {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  truck                  Truck?               @relation(fields: [truckId], references: [id])
  truckId                String?              @unique @db.ObjectId
  chassis_condition      BodyChassisCondition @default(Good)
  body_condition         BodyChassisCondition @default(Good)
  seatbelt_functionality Functionality        @default(Functional)
}

model ExhaustSystem {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  truck              Truck?    @relation(fields: [truckId], references: [id])
  truckId            String?   @unique @db.ObjectId
  pipes_condition    Condition @default(Intact)
  mufflers_condition Condition @default(Intact)
  leak_detection     Boolean   @default(false)
}

model ElectricalSystem {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  truck                Truck?        @relation(fields: [truckId], references: [id])
  truckId              String?       @unique @db.ObjectId
  battery_status       Battery       @default(Good)
  lights_functionality Functionality @default(Functional)
  fuse_status          FuseStatus    @default(Intact)
}

model Tire {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  truck   Truck?     @relation(fields: [truckId], references: [id])
  truckId String?    @unique @db.ObjectId
  brand   String
  status  StatusTire @default(New)
  model   Int
  mileage Int        @default(0)
}

//---------------------------------------------------------------------------------------

enum FuseStatus {
  Intact
  Blown
  NeedsReplacement
  NotApplicable
}

enum FluidLevel {
  Full
  Low
  Refill
}

enum Condition {
  Intact
  Corroded
  Leaking
  NeedsReplacement
}

enum BrakesCondition {
  Good
  Fair
  Worn
  Replace
}

enum Battery {
  Good
  Weak
  Dead
  NeedsReplacement
}

enum Functionality {
  Functional
  NonFunctional
  PartiallyFunctional
  NotApplicable
}

enum Level {
  Full
  Low
  Empty
  Check
}

enum BodyChassisCondition {
  Good
  Damaged
  Rusty
  NeedsRepair
}

enum FuelAmount {
  Full
  Half
  Empty
}

enum StatusTire {
  New
  WornOut
  Change
}

//--------------------------------------------------------------------------------------

enum typeMaintenance {
  weekly
  before_route
  monthly
}

enum typeRole {
  admin
  driver
}

//---------------------------------- Fin de enums ---------------------------------------

model Report {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  maintenance   Maintenance? @relation(fields: [maintenanceId], references: [id])
  maintenanceId String?      @unique @db.ObjectId
  cost          Float
}

model Maintenance {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  description String
  truck       Truck?          @relation(fields: [truckId], references: [id])
  truckId     String?         @db.ObjectId
  report      Report?
  type        typeMaintenance
  Cost        Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Route {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  truck    Truck?   @relation(fields: [truckId], references: [id])
  truckId  String?  @db.ObjectId
  user     User?    @relation(fields: [userId], references: [id])
  userId   String?  @db.ObjectId
  distance Float
  Time     Float
  from     Address? @relation("FromAddress", fields: [fromId], references: [id])
  fromId   String?  @db.ObjectId
  to       Address? @relation("ToAddress", fields: [toId], references: [id])
  toId     String?  @db.ObjectId
}
